{
  "version": 3,
  "sources": ["../app.ts"],
  "sourcesContent": ["// app.ts\r\n\r\n// Your 16-hex-digit device EUI, hard-coded so the browser bundle can see it:\r\nconst DEVICE_EUI = '0004A30B010624BC';\r\n\r\nconst proto = location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\r\nconst socket = new WebSocket(`${proto}//${location.host}/ws`);\r\n\r\ninterface UplinkInput {\r\n  bytes: number[];\r\n  fPort:  number;\r\n  recvTime: string;\r\n}\r\n\r\ninterface UplinkOutput {\r\n  data?:    { light: number; [key:string]: any };\r\n  warnings?: string[];\r\n  errors?:   string[];\r\n}\r\n\r\ninterface DownlinkOutput {\r\n  data?:    { setCounter: boolean; range: number };\r\n  warnings?: string[];\r\n  errors?:   string[];\r\n}\r\n\r\n// --- decodeUplink (unchanged) ---\r\nfunction decodeUplink(input: UplinkInput): UplinkOutput {\r\n  const maybeAscii = String.fromCharCode(...input.bytes);\r\n  if (/^[0-9A-Fa-f]+$/.test(maybeAscii)) {\r\n    return { data: { light: parseInt(maybeAscii, 16) }, warnings: [] };\r\n  }\r\n  if (input.bytes.length < 2) {\r\n    return { errors: [\"Not enough data to decode\"] };\r\n  }\r\n  const lightRaw = (input.bytes[0] << 8) | input.bytes[1];\r\n  return { data: { light: lightRaw }, warnings: [] };\r\n}\r\n\r\n// --- decodeDownlink (you already had this) ---\r\nfunction decodeDownlink(hex: string): DownlinkOutput {\r\n  if (typeof hex !== \"string\" || hex.length < 4) {\r\n    return { errors: [\"Invalid downlink hex\"] };\r\n  }\r\n  try {\r\n    const b0 = parseInt(hex.substr(0, 2), 16);\r\n    const b1 = parseInt(hex.substr(2, 2), 16);\r\n    const setCounter = !!(b0 & 0x01);\r\n    const range = b1;\r\n    return { data: { setCounter, range }, warnings: [] };\r\n  } catch (e: any) {\r\n    return { errors: [\"Failed to decode downlink: \" + e.message] };\r\n  }\r\n}\r\n\r\n// --- encodeDownlink (NEW) ---\r\ntype DownlinkOk  = { fPort: number; bytes: number[]; warnings: string[] };\r\ntype DownlinkErr = { errors: string[] };\r\ntype DownlinkResult = DownlinkOk | DownlinkErr;\r\n\r\nfunction encodeDownlink(\r\n  input: { data: { setCounter: boolean; range: number } }\r\n): DownlinkResult {\r\n  try {\r\n    const { setCounter, range } = input.data;\r\n    if (typeof range !== \"number\") {\r\n      return { errors: [\"Missing or invalid 'range' in downlink data\"] };\r\n    }\r\n    const byte0 = setCounter ? 0x01 : 0x00;\r\n    const byte1 = range & 0xff;\r\n    return { fPort: 10, bytes: [byte0, byte1], warnings: [] };\r\n  } catch (err: any) {\r\n    return { errors: [\"Failed to encode downlink: \" + err.message] };\r\n  }\r\n}\r\n\r\nsocket.onopen = () => {\r\n  console.log(\"\u2705 Connected to proxy WebSocket\");\r\n  // 1) pull history\r\n  socket.send(JSON.stringify({ cmd: 'cq', page: 1 }));\r\n  // 2) then subscribe to just your device\r\n  socket.send(JSON.stringify({ cmd: 'sub', EUI: DEVICE_EUI }));\r\n};\r\n\r\nsocket.onerror = err => {\r\n  console.error(\"\u26A0\uFE0F WebSocket error\", err);\r\n};\r\n\r\nsocket.onclose = () => {\r\n  console.log(\"\uD83D\uDED1 WebSocket closed\");\r\n};\r\n\r\n\r\n\r\nsocket.onmessage = evt => {\r\n  const msg = JSON.parse(evt.data);\r\n  // handle the history response\r\n  if (msg.cmd === 'cq') {\r\n    console.log(\"history:\", msg.cache);\r\n    msg.cache\r\n      .filter((item: { EUI: string; }) => item.EUI === DEVICE_EUI)\r\n      .forEach(renderFrame);\r\n    return;\r\n  }\r\n\r\n  // only pay attention to gateway/uplink frames\r\n  if ((msg.cmd === 'gw' || msg.cmd === 'rx') && msg.EUI === DEVICE_EUI) {\r\n    renderFrame(msg);\r\n  }\r\n\r\n  // downlink confirms\r\n  if ((msg.cmd === 'tx' || msg.cmd === 'mtx') && msg.EUI === DEVICE_EUI) {\r\n    console.log(\"downlink enqueued:\", msg);\r\n  }\r\n};\r\n\r\nfunction renderFrame(frame: any) {\r\n  const hex = frame.data as string;\r\n  // turn \"30313139\" \u2192 [0x30,0x31,0x31,0x39]\r\n  const bytes = [];\r\n  for (let i = 0; i < hex.length; i += 2) {\r\n    bytes.push(parseInt(hex.substr(i, 2), 16));\r\n  }\r\n  const uplink: UplinkInput = {\r\n    bytes,\r\n    fPort:   frame.port,\r\n    recvTime: new Date(frame.ts).toISOString()\r\n  };\r\n  const decoded = decodeUplink(uplink);\r\n  if (decoded.errors?.length) {\r\n    console.error(\"decodeUplink error\", decoded.errors);\r\n    return;\r\n  }\r\n\r\n  const container = document.getElementById(\"sensor-data\");\r\n  if (!container) return;\r\n  container.innerHTML = \r\n    decoded.data!.light != null\r\n      ? `<p>Light sensor: ${decoded.data!.light}</p>`\r\n      : `<p>Raw data: ${JSON.stringify(decoded.data)}</p>`;\r\n}\r\n\r\n\r\nfunction setupDownlinkButton() {\r\n  const btn = document.getElementById(\"sendDownlink\");\r\n  if (!btn) return console.error(\"Send button not found\");\r\n\r\n  btn.addEventListener(\"click\", () => {\r\n    // now uses your encodeDownlink()\r\n    const result = encodeDownlink({ data: { setCounter: true, range: 1 } });\r\n    if (\"errors\" in result) {\r\n      console.error(\"Encode errors:\", result.errors);\r\n      return;\r\n    }\r\n    const { fPort, bytes } = result;\r\n    const hex = bytes.map(b => b.toString(16).padStart(2, \"0\")).join(\"\");\r\n\r\n    const downMsg = {\r\n      cmd:    \"tx\",\r\n      EUI:    DEVICE_EUI,\r\n      port:   fPort,\r\n      data:   hex,\r\n      confirmed: false   // optional\r\n    };\r\n    socket.send(JSON.stringify(downMsg));\r\n    console.log(\"\u2B07\uFE0F Sent downlink message:\", downMsg);\r\n  });\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", setupDownlinkButton);\r\n"],
  "mappings": "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",
  "names": []
}
