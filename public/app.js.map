{
  "version": 3,
  "sources": ["../app.ts"],
  "sourcesContent": ["// app.ts\r\n\r\n// Your 16-hex-digit device EUI\r\nconst DEVICE_EUI = '00004A30B010D3F45';\r\n\r\ninterface UplinkInput {\r\n  bytes: number[];\r\n  fPort:  number;\r\n  recvTime: string;\r\n}\r\n\r\ninterface UplinkOutput {\r\n  data?:    { light: number; [key:string]: any };\r\n  warnings?: string[];\r\n  errors?:   string[];\r\n}\r\n\r\n// decodeUplink (same as before)\r\nfunction decodeUplink(input: UplinkInput): UplinkOutput {\r\n  if (!input.bytes || input.bytes.length < 2) {\r\n    return { errors: [\"Not enough data to decode light sensor value\"] };\r\n  }\r\n  const lightRaw   = (input.bytes[0] << 8) | input.bytes[1];\r\n  return { data: { light: lightRaw }, warnings: [] };\r\n}\r\n\r\n// encodeDownlink (same as before)\r\ntype DownlinkOk  = { fPort: number; bytes: number[]; warnings: string[] };\r\ntype DownlinkErr = { errors: string[] };\r\ntype DownlinkResult = DownlinkOk | DownlinkErr;\r\n\r\nfunction encodeDownlink(\r\n  input: { data: { setCounter: boolean; range: number } }\r\n): DownlinkResult {\r\n  try {\r\n    const { setCounter, range } = input.data;\r\n    if (typeof range !== \"number\") {\r\n      return { errors: [\"Missing or invalid 'range' in downlink data\"] };\r\n    }\r\n    const byte0 = setCounter ? 0x01 : 0x00;\r\n    const byte1 = range & 0xff;\r\n    return { fPort: 10, bytes: [byte0, byte1], warnings: [] };\r\n  } catch (err: any) {\r\n    return { errors: [\"Failed to encode downlink: \" + err.message] };\r\n  }\r\n}\r\n\r\n// Open a WebSocket to your proxy (no secrets here)\r\nconst socket = new WebSocket(`ws://${globalThis.location.host}/ws`);\r\n\r\nsocket.onopen = () => {\r\n  console.log(\"\u2705 Connected to proxy WebSocket\");\r\n};\r\n\r\nsocket.onerror = (err) => {\r\n  console.error(\"\u26A0\uFE0F WebSocket error\", err);\r\n};\r\n\r\nsocket.onclose = () => {\r\n  console.log(\"\uD83D\uDED1 WebSocket closed\");\r\n};\r\n\r\nsocket.onmessage = (evt) => {\r\n  const msg = JSON.parse(evt.data);\r\n\r\n  // 1) Look for \"rx\" frames, and only for your device:\r\n  if (msg.cmd === \"rx\" && msg.EUI === DEVICE_EUI) {\r\n    // 2) Pull timestamp\r\n    const recvTime = new Date(msg.ts).toISOString();\r\n\r\n    // 3) If Loriot already decoded for you, use that:\r\n    let dataObj: any;\r\n    if (msg.decoded && msg.decoded.data) {\r\n      dataObj = msg.decoded.data;\r\n    } else {\r\n      // 4) Otherwise parse the raw hex & run your decodeUplink\r\n      const hex = msg.data as string;\r\n      const bytes: number[] = [];\r\n      for (let i = 0; i < hex.length; i += 2) {\r\n        bytes.push(parseInt(hex.substr(i, 2), 16));\r\n      }\r\n\r\n      const uplink: UplinkInput = {\r\n        bytes,\r\n        fPort:   msg.port,    // e.g. 1 or whatever port\r\n        recvTime\r\n      };\r\n      const decoded = decodeUplink(uplink);\r\n      if (decoded.errors && decoded.errors.length) {\r\n        console.error(\"Decoding errors:\", decoded.errors);\r\n        return;\r\n      }\r\n      dataObj = decoded.data!;\r\n    }\r\n\r\n    // 5) Update your UI however makes sense:\r\n    //    e.g. if your sensor is light:\r\n    if (typeof dataObj.light === \"number\") {\r\n      const container = document.getElementById(\"sensor-data\");\r\n      if (container) {\r\n        container.innerHTML = `<p>Light Sensor Value: ${dataObj.light}</p>`;\r\n      }\r\n    }\r\n\r\n    //    or if your payload has temperature/humidity/pulseCounter:\r\n    if (typeof dataObj.temperature === \"number\") {\r\n      const container = document.getElementById(\"sensor-data\");\r\n      if (container) {\r\n        container.innerHTML = `\r\n          <p>Temp: ${dataObj.temperature}\u00B0C</p>\r\n          <p>Humidity: ${dataObj.humidity * 100}%</p>\r\n          <p>Pulse: ${dataObj.pulseCounter}</p>\r\n        `;\r\n      }\r\n    }\r\n\r\n    else{\r\n      console.log(\"random data brrr\")\r\n      const container = document.getElementById(\"sensor-data\");\r\n      if (container) {\r\n        container.innerHTML = `<p>random Value: ${dataObj.light}</p>`;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * When the user clicks \u201CSend Downlink\u201D, encode & send a `down` message\r\n * over the same socket. Your server will forward it to Loriot.\r\n */\r\nfunction setupDownlinkButton() {\r\n  const btn = document.getElementById(\"sendDownlink\");\r\n  if (!btn) return console.error(\"Send button not found\");\r\n\r\n  btn.addEventListener(\"click\", () => {\r\n    const result = encodeDownlink({ data: { setCounter: true, range: 1 } });\r\n    if (\"errors\" in result) {\r\n      console.error(\"Encode errors:\", result.errors);\r\n      return;\r\n    }\r\n    const { fPort, bytes } = result;\r\n    const hex = bytes.map(b => b.toString(16).padStart(2, \"0\")).join(\"\");\r\n\r\n    // Build the downlink envelope Loriot expects\r\n    const downMsg = {\r\n      type:  \"down\",\r\n      devEUI: DEVICE_EUI,\r\n      cmd:   \"tx\",\r\n      port:  fPort,\r\n      data:  hex,\r\n      confirmed: false\r\n    };\r\n\r\n    socket.send(JSON.stringify(downMsg));\r\n    console.log(\"\u2B07\uFE0F Sent downlink message:\", downMsg);\r\n  });\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  setupDownlinkButton();\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
